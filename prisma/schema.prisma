// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          String  @id @unique
  fullName    String
  email       String  @unique
  password    String
  userLevelId String?

  offerBy       SuratKeteranganKuliah[] @relation("offerBy")
  UserLevel     UserLevel?              @relation(fields: [userLevelId], references: [id])
  Mahasiswa     Mahasiswa?
  Dosen         Dosen?
  Dekan         Dekan?
  offerCutiBy   CutiSementara[]         @relation("offerBy")
  StatusHistory StatusHistory[]
}

model Mahasiswa {
  id        String   @id @unique
  name      String
  npm       String   @unique
  birthday  String
  semester  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model Dosen {
  id        String   @id @unique
  name      String
  nip       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model Dekan {
  id        String   @id @unique
  name      String
  nip       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model UserLevel {
  id        String   @id @unique
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
  acl  Acl[]
}

model Feature {
  id        String   @id @unique
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  action    Action[]
  Acl       Acl[]
}

model Action {
  id          String   @id @unique
  name        String
  featureName String
  feature     Feature  @relation(fields: [featureName], references: [name], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([featureName, name])
}

model Acl {
  id          String   @id @unique
  featureName String
  actionName  String
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feature   Feature   @relation(fields: [featureName], references: [name], onDelete: Cascade)
  userLevel UserLevel @relation(fields: [userLevelId], references: [id], onDelete: Cascade)

  @@unique([featureName, actionName, userLevelId])
}

enum TypeForSuratKeteranganKuliah {
  KP4
  SK_PENSIUN
  SURAT_KETERANGAN_PERUSAHAAN
  LAINNYA
}

model SuratKeteranganKuliah {
  id          String                          @id @unique
  type        TypeForSuratKeteranganKuliah
  fileUrl     String
  description String
  noSurat     String?
  reason      String?
  offerById   String
  status      VerificationStatusKemahasiswaan @default(DIPROSES_OPERATOR_KEMAHASISWAAN)
  createdAt   DateTime                        @default(now())
  updatedAt   DateTime                        @updatedAt

  offerBy       User            @relation("offerBy", fields: [offerById], references: [id])
  statusHistory StatusHistory[]
}

enum VerificationStatusKemahasiswaan {
  DIPROSES_OPERATOR_KEMAHASISWAAN
  DISETUJUI_OPERATOR_KEMAHASISWAAN
  DIPROSES_KASUBBAG_KEMAHASISWAAN
  DISETUJUI_KASUBBAG_KEMAHASISWAAN
  SURAT_DIPROSES
  USULAN_DISETUJUI
  USULAN_DITOLAK
}

model StatusHistory {
  id          String                          @id @unique
  action      VerificationStatusKemahasiswaan
  description String
  createdAt   DateTime                        @default(now())

  userId                  String
  User                    User                   @relation(fields: [userId], references: [id])
  SuratKeteranganKuliah   SuratKeteranganKuliah? @relation(fields: [suratKeteranganKuliahId], references: [id])
  suratKeteranganKuliahId String?
  CutiSementara           CutiSementara?         @relation(fields: [cutiSementaraId], references: [id])
  cutiSementaraId         String?
}

model CutiSementara {
  id                          String                          @id @unique
  suratPersetujuanOrangTuaUrl String
  bebasPustakaUrl             String
  bssFormUrl                  String
  status                      VerificationStatusKemahasiswaan @default(DIPROSES_OPERATOR_KEMAHASISWAAN)
  noSurat                     String?
  reason                      String
  offerById                   String
  createdAt                   DateTime                        @default(now())
  updatedAt                   DateTime                        @updatedAt

  offerBy       User            @relation("offerBy", fields: [offerById], references: [id])
  statusHistory StatusHistory[]
}
